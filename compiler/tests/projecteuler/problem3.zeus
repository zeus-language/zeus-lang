
fn largestPrimeFactor(value: i64) : i64{
    let mut i: i64 = 3 as i64;
    let mut n : i64 = value;
    let mut largestPrimeFactor : i64 = -1 as i64;

    // Check for factors of 2
    while n % 2 as i64 == 0 as i64 {
        largestPrimeFactor = 2;
        n = n / 2 as i64;
    }

    // Check for odd factors starting from 3
    while i * i <= n {
        while n % i == 0 as i64 {
            largestPrimeFactor = i;
            n = n / i;
        }

        i = i + 2 as i64;
     }

    // If n is still greater than 2, it is
    // a prime number
    if n > 2 as i64 {
        largestPrimeFactor = n;
    }
    return largestPrimeFactor;
}

fn main() : i32 {
    println(largestPrimeFactor(600851475143 ));
    return 0;
}